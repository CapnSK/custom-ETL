/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.dwm.a2;

import java.util.List;
import java.util.Map;

import com.dwm.a2.Enums.ApplicationState;
import com.dwm.a2.Model.ApplicationContext;
import com.dwm.a2.Model.Article;
import com.dwm.a2.Service.FetchRemote;
import com.dwm.a2.Service.Load;
import com.dwm.a2.Service.Queue;
import com.dwm.a2.Service.Transform;
import com.dwm.a2.Service.LogService;
import com.dwm.a2.Utils.Constants;
import com.kwabenaberko.newsapilib.models.response.ArticleResponse;


public class App {
    
    
    /** 
     * @apiNote This is a driver code for the dbm system. It maintains the application state and invokes the respective services
     * @param args
     */
    public static void main(String[] args){
        ETLEngine.run();
    }
}

class ETLEngine{
    private static LogService logger = LogService.getLogger(ETLEngine.class);
    private static ApplicationState applicationState = ApplicationState.INIT;
    private static ApplicationContext applicationContext = new ApplicationContext();


    public static void run(){
        while(ETLEngine.applicationState != ApplicationState.EXIT){
            logger.log("Application In "+ETLEngine.applicationState.getLabel()+" mode");
            switch(ETLEngine.applicationState){
                case INIT:
                    ETLEngine.applicationState = ApplicationState.EXTRACT;
                    break;
                case EXTRACT:
                    Map<String, ArticleResponse> response = new FetchRemote().getApiResponse(Constants.KEYWORDS);
                    if(response != null){
                        logger.log("Data extracted successfully ");
                        applicationContext.setPhase1Output(response);
                        ETLEngine.applicationState = ApplicationState.QUEUE;
                    }
                    break;
                case QUEUE:
                    if(applicationContext.getPhase1Output() != null){
                        Boolean persistedFiles = new Queue().persistArticles(applicationContext.getPhase1Output());
                        logger.log("Files persisted : "+ persistedFiles);
                        applicationContext.setPhase2Output(persistedFiles);
                        ETLEngine.applicationState = ApplicationState.TRANSFORM;
                    }
                    break;
                case TRANSFORM:
                    if(applicationContext.getPhase2Output() != null){
                        List<Article> cleanedArticles = new Transform().clean(applicationContext.getPhase2Output());
                        if(cleanedArticles != null){
                            logger.log("Cleaned the data successfully");
                            applicationContext.setPhase3Output(cleanedArticles);
                        }
                        ETLEngine.applicationState = ApplicationState.LOAD;
                    }
                    break;
                case LOAD:
                    if(applicationContext.getPhase3Output() != null){
                        Boolean saved = new Load().saveToRemote(applicationContext.getPhase3Output());
                        if(saved){
                            logger.log("Cleaned Data saved to remote successfully.\nTasks finished, closing the process");
                        }
                    }
                    ETLEngine.applicationState = ApplicationState.EXIT;
                    break;
                case EXIT:
                System.exit(0);
                    break;
                default:
                    break;
            }
        }
        logger.log("Bye");
    }
}
